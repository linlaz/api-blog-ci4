openapi: 3.0.0
info:
  title: MAXIMUM
  description: 'This is docs rest api simple blogs'
  contact:
    email: lintanglazuardi11@gmail.com
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8080/api'
    description: 'Development Server'
paths:
  /login:
    post:
      tags:
        - Auth
      summary: 'User login'
      description: 'Logs in a user using email and password'
      operationId: userLogin
      requestBody:
        description: 'User credentials'
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: admin@gmail.com
                password:
                  type: string
                  example: admin
              type: object
      responses:
        '200':
          description: 'Successful login'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 200 }
                  error: { type: bool, example: false }
                  message: { type: string, example: 'Login successful' }
                  data: { properties: { token: { type: string, example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... } }, type: object }
                type: object
        '404':
          description: 'Invalid username or password'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 401 }
                  error: { type: bool, example: true }
                  message: { type: string, example: 'Invalid username or password' }
                  data: { type: array, items: {  } }
                type: object
  /register:
    post:
      tags:
        - Auth
      summary: 'User Registrasi'
      description: 'Registrasi in a user'
      operationId: userRegistrasi
      requestBody:
        description: 'User credentials'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: admin
                email:
                  type: string
                  example: admin@gmail.com
                password:
                  type: string
                  example: admin
              type: object
      responses:
        '200':
          description: 'User added successfully'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 200 }
                  error: { type: bool, example: false }
                  message: { type: string, example: 'User added successfully' }
                  data: { properties: { token: { type: string, example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... } }, type: object }
                type: object
        '404':
          description: 'Invalid username or password'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 401 }
                  error: { type: bool, example: true }
                  message: { type: string, example: 'Invalid username or password' }
                  data: { type: array, items: {  } }
                type: object
  /blogs:
    get:
      tags:
        - Blogs
      summary: 'Find list Blogs'
      description: 'Returns list of Blogs'
      operationId: getBlogs
      parameters:
        -
          name: status
          in: query
          description: 'status by column defined'
          schema:
            type: string
            enum:
              - published
              - draft
        -
          name: orderBy
          in: query
          description: 'orderBy by column defined'
          schema:
            type: string
            default: id
        -
          name: direction
          in: query
          description: 'direction for order'
          schema:
            type: string
            default: DESC
            enum:
              - DESC
              - ASC
        -
          name: limit
          in: query
          description: 'limit data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'List of blogs'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 200 }
                  error: { type: boolean, example: false }
                  message: { type: string, example: 'List of blogs' }
                  data: { type: array, items: { properties: { id: { type: integer, example: 9 }, title: { type: string, example: 'try title12123123' }, slug: { type: string, example: try-title12123123 }, description: { type: string, example: 'try description' }, thumbnail: { type: string, example: 'https://santrikoding.com/storage/posts/pfpmpIQr9ObGjLm8EgSiecTOHU1csTVrwkMaR9DL.png' }, categories_id: { type: integer, example: 1 }, author_id: { type: integer, example: 1 }, status: { type: string, example: published }, created_at: { type: string, example: '2023-08-26 14:59:32' }, updated_at: { type: string, example: '2023-08-26 14:59:32' }, deleted_at: { type: string, example: null }, category: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: Teknologi }, slug: { type: string, example: teknologi } }, type: object }, author: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: admin }, email: { type: string, example: admin@gmail.com } }, type: object } }, type: object } }
                type: object
    post:
      tags:
        - Blogs
      summary: 'Add a new Blogs to the store'
      operationId: addBlogs
      requestBody:
        $ref: '#/components/requestBodies/Blogs'
      responses:
        '200':
          description: 'List of blogs'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 200 }
                  error: { type: boolean, example: false }
                  message: { type: string, example: 'List of blogs' }
                  data: { properties: { id: { type: integer, example: 9 }, title: { type: string, example: 'try title12123123' }, slug: { type: string, example: try-title12123123 }, description: { type: string, example: 'try description' }, thumbnail: { type: string, example: 'https://santrikoding.com/storage/posts/pfpmpIQr9ObGjLm8EgSiecTOHU1csTVrwkMaR9DL.png' }, categories_id: { type: integer, example: 1 }, author_id: { type: integer, example: 1 }, status: { type: string, example: published }, created_at: { type: string, example: '2023-08-26 14:59:32' }, updated_at: { type: string, example: '2023-08-26 14:59:32' }, deleted_at: { type: string, example: null } }, type: object }
                type: object
        '400':
          description: 'Invalid input'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 400 }
                  error: { type: boolean, example: true }
                  message: { properties: { thumbnail: { type: string, example: 'thumbnail is not a valid uploaded file' } }, type: object }
                  data: { type: object }
                type: object
        '401':
          description: 'Unauthorized - Must Login'
          content:
            application/json:
              schema:
                properties:
                  success: { type: boolean, example: false }
                  code: { type: integer, example: 401 }
                  error: { type: boolean, example: false }
                  message: { type: string, example: 'Must Login' }
                  data: { type: object }
                type: object
      security:
        -
          bearer_auth: []
  '/blogs/{id}':
    get:
      tags:
        - Blogs
      summary: 'Find Blogs by ID'
      description: 'Returns a single Blogs'
      operationId: getBlogsById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Blogs to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'List of blogs'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 200 }
                  error: { type: boolean, example: false }
                  message: { type: string, example: 'List of blogs' }
                  data: { type: array, items: { properties: { id: { type: integer, example: 9 }, title: { type: string, example: 'try title12123123' }, slug: { type: string, example: try-title12123123 }, description: { type: string, example: 'try description' }, thumbnail: { type: string, example: 'https://santrikoding.com/storage/posts/pfpmpIQr9ObGjLm8EgSiecTOHU1csTVrwkMaR9DL.png' }, categories_id: { type: integer, example: 1 }, author_id: { type: integer, example: 1 }, status: { type: string, example: published }, created_at: { type: string, example: '2023-08-26 14:59:32' }, updated_at: { type: string, example: '2023-08-26 14:59:32' }, deleted_at: { type: string, example: null }, category: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: Teknologi }, slug: { type: string, example: teknologi } }, type: object }, author: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: admin }, email: { type: string, example: admin@gmail.com } }, type: object } }, type: object } }
                type: object
        '404':
          description: 'No blog found'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 404 }
                  error: { type: boolean, example: true }
                  messages: { type: string, example: 'No blog found' }
                  data: { type: array, items: {  } }
                type: object
    post:
      tags:
        - Blogs
      summary: 'Update an existing Blogs'
      operationId: updateBlogs
      parameters:
        -
          name: id
          in: path
          description: 'Blogs id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Blogs'
      responses:
        '200':
          description: 'List of blogs'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 200 }
                  error: { type: boolean, example: false }
                  message: { type: string, example: 'List of blogs' }
                  data: { properties: { id: { type: integer, example: 9 }, title: { type: string, example: 'try title12123123' }, slug: { type: string, example: try-title12123123 }, description: { type: string, example: 'try description' }, thumbnail: { type: string, example: 'https://santrikoding.com/storage/posts/pfpmpIQr9ObGjLm8EgSiecTOHU1csTVrwkMaR9DL.png' }, categories_id: { type: integer, example: 1 }, author_id: { type: integer, example: 1 }, status: { type: string, example: published }, created_at: { type: string, example: '2023-08-26 14:59:32' }, updated_at: { type: string, example: '2023-08-26 14:59:32' }, deleted_at: { type: string, example: null } }, type: object }
                type: object
        '404':
          description: 'No blog found'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 404 }
                  error: { type: boolean, example: true }
                  messages: { type: string, example: 'No blog found' }
                  data: { type: array, items: {  } }
                type: object
        '400':
          description: 'Invalid input'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 400 }
                  error: { type: boolean, example: true }
                  message: { properties: { thumbnail: { type: string, example: 'thumbnail is not a valid uploaded file' } }, type: object }
                  data: { type: object }
                type: object
        '401':
          description: 'Unauthorized - Must Login'
          content:
            application/json:
              schema:
                properties:
                  success: { type: boolean, example: false }
                  code: { type: integer, example: 401 }
                  error: { type: boolean, example: false }
                  message: { type: string, example: 'Must Login' }
                  data: { type: object }
                type: object
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Blogs
      summary: 'Deletes a Blog'
      operationId: deleteBlog
      parameters:
        -
          name: id
          in: path
          description: 'Blog ID to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Success: Blog successfully deleted'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 200 }
                  messages: { type: string, example: 'Blog successfully deleted' }
                  data: { type: object }
                type: object
        '404':
          description: 'Blog Not Found'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 404 }
                  messages: { type: string, example: 'Blog not found' }
                  data: { type: object }
                type: object
      security:
        -
          bearer_auth: []
  /categories:
    get:
      tags:
        - Categories
      summary: 'Find list of Categories'
      description: 'Returns a list of Categories'
      operationId: getCategories
      parameters:
        -
          name: status
          in: query
          description: 'Filter by category status'
          schema:
            type: string
            enum:
              - published
              - draft
      responses:
        '200':
          description: 'List of categories'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 200 }
                  error: { type: boolean, example: false }
                  message: { type: string, example: 'Categories list' }
                  data: { type: array, items: { properties: { id: { type: string, example: '1' }, name: { type: string, example: Teknologi }, slug: { type: string, example: teknologi }, status: { type: string, example: published }, created_at: { type: string, example: '2023-08-26 11:37:31' }, updated_at: { type: string, example: '2023-08-26 11:37:31' }, deleted_at: { type: string, example: null } }, type: object } }
                type: object
    post:
      tags:
        - Categories
      summary: 'Add a new Categories to the store'
      operationId: addCategories
      requestBody:
        $ref: '#/components/requestBodies/Categories'
      responses:
        '200':
          description: 'categories created successfully'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 200 }
                  error: { type: boolean, example: false }
                  message: { type: string, example: 'Categories Created' }
                  data: { properties: { id: { type: string, example: '1' }, name: { type: string, example: Teknologi }, slug: { type: string, example: teknologi }, status: { type: string, example: published }, created_at: { type: string, example: '2023-08-26 11:37:31' }, updated_at: { type: string, example: '2023-08-26 11:37:31' }, deleted_at: { type: string, example: null } }, type: object }
                type: object
        '400':
          description: 'Invalid input'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 400 }
                  error: { type: boolean, example: true }
                  message: { properties: { status: { type: string, example: 'status wrong format' } }, type: object }
                  data: { type: object }
                type: object
        '401':
          description: 'Unauthorized: User must login'
          content:
            application/json:
              schema:
                properties:
                  success: { type: boolean, example: false }
                  code: { type: integer, example: 401 }
                  error: { type: boolean, example: false }
                  message: { type: string, example: 'Must Login' }
                  data: { type: object }
                type: object
      security:
        -
          bearer_auth: []
  '/categories/{id}':
    get:
      tags:
        - Categories
      summary: 'Find Categories by ID'
      description: 'Returns a single Categories'
      operationId: getCategoriesById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Categories to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'List of categorys'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 200 }
                  error: { type: boolean, example: false }
                  message: { type: string, example: 'List of categorys' }
                  data: { properties: { id: { type: string, example: '1' }, name: { type: string, example: Teknologi }, slug: { type: string, example: teknologi }, status: { type: string, example: published }, created_at: { type: string, example: '2023-08-26 11:37:31' }, updated_at: { type: string, example: '2023-08-26 11:37:31' }, deleted_at: { type: string, example: null } }, type: object }
                type: object
        '404':
          description: 'No category found'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 404 }
                  error: { type: boolean, example: true }
                  messages: { type: string, example: 'No category found' }
                  data: { type: array, items: {  } }
                type: object
    post:
      tags:
        - Categories
      summary: 'Update an existing Categories'
      operationId: updateCategories
      parameters:
        -
          name: id
          in: path
          description: 'Categories id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Categories'
      responses:
        '200':
          description: 'List of categories'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 200 }
                  error: { type: boolean, example: false }
                  message: { type: string, example: 'Categories updated' }
                  data: { properties: { id: { type: string, example: '1' }, name: { type: string, example: Teknologi }, slug: { type: string, example: teknologi }, status: { type: string, example: published }, created_at: { type: string, example: '2023-08-26 11:37:31' }, updated_at: { type: string, example: '2023-08-26 11:37:31' }, deleted_at: { type: string, example: null } }, type: object }
                type: object
        '400':
          description: 'Invalid input'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 400 }
                  error: { type: boolean, example: true }
                  message: { properties: { status: { type: string, example: 'status wrong format' } }, type: object }
                  data: { type: object }
                type: object
        '404':
          description: 'No category found'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 404 }
                  error: { type: boolean, example: true }
                  messages: { type: string, example: 'No category found' }
                  data: { type: array, items: {  } }
                type: object
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Categories
      summary: 'Deletes a Category'
      operationId: deleteCategory
      parameters:
        -
          name: id
          in: path
          description: 'Category ID to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Success: Category successfully deleted'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 200 }
                  messages: { type: string, example: 'Category successfully deleted' }
                  data: { type: object }
                type: object
        '404':
          description: 'Category Not Found'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 404 }
                  messages: { type: string, example: 'Category not found' }
                  data: { type: object }
                type: object
      security:
        -
          bearer_auth: []
  /users:
    get:
      tags:
        - Users
      summary: 'Find list Users'
      description: 'Returns list of Users'
      operationId: getUsers
      responses:
        '200':
          description: 'List of Users'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 200 }
                  error: { type: boolean, example: false }
                  message: { type: string, example: 'List of Users' }
                  data: { type: array, items: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: admin }, email: { type: string, example: admin@gmail.com }, created_at: { type: string, example: '2023-08-26 14:59:32' }, updated_at: { type: string, example: '2023-08-26 14:59:32' }, deleted_at: { type: string, example: null } }, type: object } }
                type: object
        '401':
          description: 'Unauthorized - Must Login'
          content:
            application/json:
              schema:
                properties:
                  success: { type: boolean, example: false }
                  code: { type: integer, example: 401 }
                  error: { type: boolean, example: false }
                  message: { type: string, example: 'Must Login' }
                  data: { type: object }
                type: object
      security:
        -
          bearer_auth: []
  '/users/{id}':
    get:
      tags:
        - Users
      summary: 'Find Users by ID'
      description: 'Returns a single Users'
      operationId: getUsersById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Users to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Users finded'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 200 }
                  error: { type: boolean, example: false }
                  message: { type: string, example: 'Users finded' }
                  data: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: admin }, email: { type: string, example: admin@gmail.com }, created_at: { type: string, example: '2023-08-26 14:59:32' }, updated_at: { type: string, example: '2023-08-26 14:59:32' }, deleted_at: { type: string, example: null } }, type: object }
                type: object
        '401':
          description: 'Unauthorized - Must Login'
          content:
            application/json:
              schema:
                properties:
                  success: { type: boolean, example: false }
                  code: { type: integer, example: 401 }
                  error: { type: boolean, example: false }
                  message: { type: string, example: 'Must Login' }
                  data: { type: object }
                type: object
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Users
      summary: 'Deletes a Users'
      operationId: deleteUsers
      parameters:
        -
          name: id
          in: path
          description: 'Users id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: 'No users found'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 404 }
                  error: { type: boolean, example: true }
                  messages: { type: string, example: 'No users found' }
                  data: { type: array, items: {  } }
                type: object
        '200':
          description: 'Success: users successfully deleted'
          content:
            application/json:
              schema:
                properties:
                  status: { type: integer, example: 200 }
                  messages: { type: string, example: 'users successfully deleted' }
                  data: { type: object }
                type: object
      security:
        -
          bearer_auth: []
components:
  schemas:
    Blogs:
      title: Blogs
      description: Blogs
      properties:
        title:
          title: title
          description: title
          type: string
          maxLength: 255
          nullable: false
        description:
          title: description
          description: description
          type: text
          maxLength: 255
          nullable: false
        thumbnail:
          title: thumbnail
          description: thumbnail
          type: string
          format: binary
        categories_id:
          title: categories_id
          description: categories_id
          type: integer
          nullable: false
        author_id:
          title: author_id
          description: author_id
          type: integer
          nullable: false
        status:
          title: status
          description: status
          type: string
          default: published
          enum:
            - published
            - draft
          nullable: false
      type: object
    Categories:
      title: Categories
      description: Categories
      properties:
        name:
          title: name
          description: name
          type: string
          maxLength: 255
          example: category
          nullable: false
        status:
          title: status
          description: status
          type: string
          example: draft
          nullable: false
      type: object
    Login:
      title: Login
      description: Login
      properties:
        email:
          title: email
          description: email
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        password:
          title: password
          description: password
          type: string
          format: '-'
          maxLength: 255
          nullable: false
      type: object
    Registrasi:
      title: Registrasi
      description: Registrasi
      properties:
        name:
          title: name
          description: name
          type: string
          maxLength: 255
          nullable: false
        email:
          title: email
          description: email
          type: string
          maxLength: 255
          nullable: false
        password:
          title: password
          description: password
          type: string
          maxLength: 255
          nullable: false
      type: object
    Users:
      title: Users
      description: Users
      properties:
        id:
          title: id
          description: id
          type: integer
          format: '-'
          nullable: false
        name:
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        email:
          title: email
          description: email
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        password:
          title: password
          description: password
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        created_at:
          title: created_at
          description: created_at
          type: string
          format: date
          nullable: true
        updated_at:
          title: updated_at
          description: updated_at
          type: string
          format: date
          nullable: true
        deleted_at:
          title: deleted_at
          description: deleted_at
          type: string
          format: date
          nullable: true
      type: object
  requestBodies:
    Blogs:
      description: 'Blogs object that needs to be added'
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/Blogs'
    Categories:
      description: 'Categories object that needs to be added'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Categories'
    Login:
      description: Login
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Login'
    registrasi:
      description: registrasi
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Registrasi'
    Users:
      description: 'Users object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Users'
        application/xml:
          schema:
            $ref: '#/components/schemas/Users'
        application/json:
          schema:
            $ref: '#/components/schemas/Users'
  securitySchemes:
    bearer_auth:
      type: http
      name: bearer_auth
      bearerFormat: JWT
      scheme: bearer
tags:
  -
    name: Blogs
    description: 'Everything about your Blogs'
  -
    name: Categories
    description: 'Everything about your Categories'
  -
    name: Auth
    description: 'Everything about your Auth'
  -
    name: Auth
    description: 'Everything about your Auth'
  -
    name: Users
    description: 'Everything about your Users'
